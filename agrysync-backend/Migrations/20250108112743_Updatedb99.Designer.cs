// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using agrysync_backend.Data;

#nullable disable

namespace agrysync_backend.Migrations
{
    [DbContext(typeof(AgrysyncDbContext))]
    [Migration("20250108112743_Updatedb99")]
    partial class Updatedb99
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("agrysync_backend.Models.Crop", b =>
                {
                    b.Property<int>("CropId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CropId"));

                    b.Property<string>("CropType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpectedHarvestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FieldId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PlantingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Variety")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CropId");

                    b.HasIndex("FieldId");

                    b.ToTable("Crop");
                });

            modelBuilder.Entity("agrysync_backend.Models.CropType", b =>
                {
                    b.Property<int>("CropTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CropTypeId"));

                    b.Property<string>("CropTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CropTypeId");

                    b.ToTable("CropTypes");
                });

            modelBuilder.Entity("agrysync_backend.Models.CropVariety", b =>
                {
                    b.Property<int>("CropVarietyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CropVarietyId"));

                    b.Property<int>("CropTypeId")
                        .HasColumnType("integer");

                    b.Property<float>("HarvestDuration")
                        .HasColumnType("real");

                    b.Property<string>("Variety")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CropVarietyId");

                    b.HasIndex("CropTypeId");

                    b.ToTable("CropVarieties");
                });

            modelBuilder.Entity("agrysync_backend.Models.CultivationData", b =>
                {
                    b.Property<int>("CultivationDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CultivationDataId"));

                    b.Property<int>("CropId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateRecorded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DiseaseId")
                        .HasColumnType("integer");

                    b.Property<string>("DiseaseReport")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FertilizerUsed")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("GrowthStage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PesticideId")
                        .HasColumnType("integer");

                    b.Property<string>("PesticideUsed")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("WaterLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CultivationDataId");

                    b.HasIndex("CropId");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("PesticideId");

                    b.ToTable("CultivationData");
                });

            modelBuilder.Entity("agrysync_backend.Models.Disease", b =>
                {
                    b.Property<int>("DiseaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DiseaseId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DiseaseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Symptoms")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DiseaseId");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("agrysync_backend.Models.DiseasePesticideMapping", b =>
                {
                    b.Property<int>("DiseasePesticideMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DiseasePesticideMappingId"));

                    b.Property<int>("DiseaseId")
                        .HasColumnType("integer");

                    b.Property<int>("PesticideId")
                        .HasColumnType("integer");

                    b.HasKey("DiseasePesticideMappingId");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("PesticideId");

                    b.ToTable("DiseasePesticideMappings");
                });

            modelBuilder.Entity("agrysync_backend.Models.Farmer", b =>
                {
                    b.Property<int>("FarmerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FarmerId"));

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FarmerAddress")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("FarmerContact")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("FarmerEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FarmerName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FarmerId");

                    b.ToTable("Farmers");
                });

            modelBuilder.Entity("agrysync_backend.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FeedbackId"));

                    b.Property<int>("CropId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateRecorded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FarmerId")
                        .HasColumnType("integer");

                    b.Property<string>("FeedbackText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("FeedbackId");

                    b.HasIndex("CropId");

                    b.HasIndex("FarmerId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("agrysync_backend.Models.Field", b =>
                {
                    b.Property<int>("FieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FieldId"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FarmerId")
                        .HasColumnType("integer");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("FieldSize")
                        .HasColumnType("double precision");

                    b.Property<string>("IrrigationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("SoilType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FieldId");

                    b.HasIndex("FarmerId");

                    b.ToTable("Field");
                });

            modelBuilder.Entity("agrysync_backend.Models.GuidanceUpdates", b =>
                {
                    b.Property<int>("GuidanceUpdatesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GuidanceUpdatesId"));

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GuideId")
                        .HasColumnType("integer");

                    b.Property<string>("ReasonForUpdate")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<double>("RecommendedWaterLevel")
                        .HasColumnType("double precision");

                    b.Property<string>("UpdatedFertilizer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("UpdatedPesticides")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<double>("UpdatedWaterLevel")
                        .HasColumnType("double precision");

                    b.HasKey("GuidanceUpdatesId");

                    b.HasIndex("GuideId");

                    b.ToTable("GuidanceUpdates");
                });

            modelBuilder.Entity("agrysync_backend.Models.Pesticide", b =>
                {
                    b.Property<int>("PesticideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PesticideId"));

                    b.Property<string>("ActiveIngredient")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ApplicationMethod")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PesticideName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SafetyPrecautions")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("PesticideId");

                    b.ToTable("Pesticides");
                });

            modelBuilder.Entity("agrysync_backend.Models.StandardGuides", b =>
                {
                    b.Property<int>("GuideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GuideId"));

                    b.Property<string>("CropType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("RecommendedFertilizer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("RecommendedPesticides")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<double>("RecommendedWaterLevel")
                        .HasColumnType("double precision");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Variety")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("GuideId");

                    b.ToTable("StandardGuides");
                });

            modelBuilder.Entity("agrysync_backend.Models.WeatherData", b =>
                {
                    b.Property<int>("WeatherDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WeatherDataId"));

                    b.Property<DateTime>("DateRecorded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FieldId")
                        .HasColumnType("integer");

                    b.Property<double>("Humidity")
                        .HasColumnType("double precision");

                    b.Property<double>("Rainfall")
                        .HasColumnType("double precision");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("double precision");

                    b.HasKey("WeatherDataId");

                    b.HasIndex("FieldId");

                    b.ToTable("WeatherData");
                });

            modelBuilder.Entity("agrysync_backend.Models.YieldData", b =>
                {
                    b.Property<int>("YieldDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("YieldDataId"));

                    b.Property<int>("CropId")
                        .HasColumnType("integer");

                    b.Property<int>("GrainQuality")
                        .HasColumnType("integer");

                    b.Property<DateTime>("HarvestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("YieldAmount")
                        .HasColumnType("integer");

                    b.HasKey("YieldDataId");

                    b.HasIndex("CropId");

                    b.ToTable("YieldData");
                });

            modelBuilder.Entity("agrysync_backend.Models.Crop", b =>
                {
                    b.HasOne("agrysync_backend.Models.Field", "Field")
                        .WithMany("Crops")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("agrysync_backend.Models.CropVariety", b =>
                {
                    b.HasOne("agrysync_backend.Models.CropType", "CropType")
                        .WithMany("CropVarieties")
                        .HasForeignKey("CropTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CropType");
                });

            modelBuilder.Entity("agrysync_backend.Models.CultivationData", b =>
                {
                    b.HasOne("agrysync_backend.Models.Crop", "Crop")
                        .WithMany("CultivationData")
                        .HasForeignKey("CropId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("agrysync_backend.Models.Disease", "Disease")
                        .WithMany("CultivationData")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("agrysync_backend.Models.Pesticide", "Pesticide")
                        .WithMany("CultivationData")
                        .HasForeignKey("PesticideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");

                    b.Navigation("Disease");

                    b.Navigation("Pesticide");
                });

            modelBuilder.Entity("agrysync_backend.Models.DiseasePesticideMapping", b =>
                {
                    b.HasOne("agrysync_backend.Models.Disease", "Disease")
                        .WithMany("DiseasePesticideMappings")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("agrysync_backend.Models.Pesticide", "Pesticide")
                        .WithMany("DiseasePesticideMappings")
                        .HasForeignKey("PesticideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Pesticide");
                });

            modelBuilder.Entity("agrysync_backend.Models.Feedback", b =>
                {
                    b.HasOne("agrysync_backend.Models.Crop", "Crop")
                        .WithMany("Feedback")
                        .HasForeignKey("CropId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("agrysync_backend.Models.Farmer", "Farmer")
                        .WithMany("Feedback")
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("agrysync_backend.Models.Field", b =>
                {
                    b.HasOne("agrysync_backend.Models.Farmer", "Farmer")
                        .WithMany("Fields")
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("agrysync_backend.Models.GuidanceUpdates", b =>
                {
                    b.HasOne("agrysync_backend.Models.StandardGuides", "StandardGuides")
                        .WithMany("GuidanceUpdates")
                        .HasForeignKey("GuideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StandardGuides");
                });

            modelBuilder.Entity("agrysync_backend.Models.WeatherData", b =>
                {
                    b.HasOne("agrysync_backend.Models.Field", "Field")
                        .WithMany("WeatherData")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("agrysync_backend.Models.YieldData", b =>
                {
                    b.HasOne("agrysync_backend.Models.Crop", "Crop")
                        .WithMany("YieldData")
                        .HasForeignKey("CropId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");
                });

            modelBuilder.Entity("agrysync_backend.Models.Crop", b =>
                {
                    b.Navigation("CultivationData");

                    b.Navigation("Feedback");

                    b.Navigation("YieldData");
                });

            modelBuilder.Entity("agrysync_backend.Models.CropType", b =>
                {
                    b.Navigation("CropVarieties");
                });

            modelBuilder.Entity("agrysync_backend.Models.Disease", b =>
                {
                    b.Navigation("CultivationData");

                    b.Navigation("DiseasePesticideMappings");
                });

            modelBuilder.Entity("agrysync_backend.Models.Farmer", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("agrysync_backend.Models.Field", b =>
                {
                    b.Navigation("Crops");

                    b.Navigation("WeatherData");
                });

            modelBuilder.Entity("agrysync_backend.Models.Pesticide", b =>
                {
                    b.Navigation("CultivationData");

                    b.Navigation("DiseasePesticideMappings");
                });

            modelBuilder.Entity("agrysync_backend.Models.StandardGuides", b =>
                {
                    b.Navigation("GuidanceUpdates");
                });
#pragma warning restore 612, 618
        }
    }
}
